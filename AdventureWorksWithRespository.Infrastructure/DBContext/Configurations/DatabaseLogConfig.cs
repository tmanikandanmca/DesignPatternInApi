using AdventureWorks.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace AdventureWorks.Infrastructure.DBContext.Configurations;

internal class DatabaseLogConfig : IEntityTypeConfiguration<DatabaseLog>
{
    public void Configure(EntityTypeBuilder<DatabaseLog> entity)
    {
        entity.HasKey(e => e.DatabaseLogID)
               .HasName("PK_DatabaseLog_DatabaseLogID")
               .IsClustered(false);

        entity.ToTable("DatabaseLog", tb => tb.HasComment("Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog."));

        entity.Property(e => e.DatabaseLogID).HasComment("Primary key for DatabaseLog records.");
        entity.Property(e => e.DatabaseUser)
            .HasMaxLength(128)
            .HasComment("The user who implemented the DDL change.");
        entity.Property(e => e.Event)
            .HasMaxLength(128)
            .HasComment("The type of DDL statement that was executed.");
        entity.Property(e => e.Object)
            .HasMaxLength(128)
            .HasComment("The object that was changed by the DDL statment.");
        entity.Property(e => e.PostTime)
            .HasComment("The date and time the DDL change occurred.")
            .HasColumnType("datetime");
        entity.Property(e => e.Schema)
            .HasMaxLength(128)
            .HasComment("The schema to which the changed object belongs.");
        entity.Property(e => e.TSQL).HasComment("The exact Transact-SQL statement that was executed.");
        entity.Property(e => e.XmlEvent)
            .HasComment("The raw XML data generated by database trigger.")
            .HasColumnType("xml");
    }
}
